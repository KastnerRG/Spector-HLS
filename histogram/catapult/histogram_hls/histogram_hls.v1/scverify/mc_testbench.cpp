// ----------------------------------------------------------------------------
// SystemC Testbench Body
//
//    HLS version: 10.4/828904 Production Release
//       HLS date: Thu Jul 25 13:12:11 PDT 2019
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 10.4
//
//   Generated by: mdk@mdk-FX504
// Generated date: Sun Oct 13 12:33:20 PDT 2019
//
// ----------------------------------------------------------------------------
// 
// -------------------------------------
// mc_testbench
// SCVerify mc_testbench SC_MODULE
// -------------------------------------
// 
#include "mc_testbench.h"
#include <mc_testbench_util.h>
#include <mc_simulator_extensions.h>

mc_testbench* mc_testbench::that;
bool testbench::enable_idle_sync_mode;
unsigned short testbench::idle_sync_stable_cycles;
void testbench::set_enable_stalls(bool flag) { mc_testbench::set_enable_stalls(flag); }
void testbench::reset_request() { mc_testbench::that->reset_request(); }
void mc_testbench_reset_request() { mc_testbench::that->reset_request(); }
bool testbench::data_in_data_ignore;
void mc_testbench_data_in_data_skip(bool v) { testbench::data_in_data_skip = v; }
bool testbench::data_in_data_skip;
bool testbench::data_in_data_skip_quiet;
bool testbench::data_in_data_skip_once;
bool testbench::data_in_data_skip_noerr;
int  testbench::data_in_data_array_comp_first;
int  testbench::data_in_data_array_comp_last;
mc_wait_ctrl testbench::data_in_data_wait_ctrl;
bool testbench::hist_out_data_ignore;
void mc_testbench_hist_out_data_skip(bool v) { testbench::hist_out_data_skip = v; }
bool testbench::hist_out_data_skip;
bool testbench::hist_out_data_skip_quiet;
bool testbench::hist_out_data_skip_once;
bool testbench::hist_out_data_skip_noerr;
int  testbench::hist_out_data_array_comp_first;
int  testbench::hist_out_data_array_comp_last;
bool testbench::hist_out_data_use_mask;
ac_int<8, false > testbench::hist_out_data_output_mask;
mc_wait_ctrl testbench::hist_out_data_wait_ctrl;
#ifndef CCS_SCVERIFY_USE_CCS_BLOCK
extern "C++" void histogram_hls( ac_channel<DATA_MEM > &data_in,  ac_channel<HIST_MEM > &hist_out);
#endif
#ifndef CCS_SCVERIFY_USE_CCS_BLOCK
void testbench::exec_histogram_hls( ac_channel<DATA_MEM > &data_in,  ac_channel<HIST_MEM > &hist_out) {
   return mc_testbench::exec_histogram_hls(data_in, hist_out);
}
#endif

// ============================================
// Function: wait_for_idle_sync
// --------------------------------------------

void mc_testbench::wait_for_idle_sync()
{
   if (testbench::enable_idle_sync_mode) {
      std::cout << "mc_testbench STOPPING   @ " << sc_time_stamp() << std::endl;
      that->cpp_testbench_active.write(false);
      while (that->design_is_idle.read())  that->wait(that->design_is_idle.value_changed_event());
      while (!that->design_is_idle.read()) that->wait(that->design_is_idle.value_changed_event());
      that->cpp_testbench_active.write(true);
      std::cout << "mc_testbench CONTINUING @ " << sc_time_stamp() << std::endl;
   } else {
      that->cpp_testbench_active.write(true);
   }
}
// ============================================
// Function: set_enable_stalls
// --------------------------------------------

void mc_testbench::set_enable_stalls(bool flag)
{
   if (flag) {
     std::cout << "Enabling STALL_FLAG toggling" << std::endl;
     that->enable_stalls.write(sc_dt::Log_1);
   } else {
     std::cout << "Disabling STALL_FLAG toggling" << std::endl;
     that->enable_stalls.write(sc_dt::Log_0);
   }
}
// ============================================
// Function: reset_request
// --------------------------------------------

void mc_testbench::reset_request()
{
   reset_request_event.notify(0,SC_NS);
}
// ============================================
// Function: capture_data_in
// --------------------------------------------

void mc_testbench::capture_data_in( ac_channel<DATA_MEM > &data_in)
{
   static mgc_sysc_ver_array1D<ac_int<16, false >,8192> data_in_data_tmp;
   static int last_j_data_in_data_in = 0;
   if (data_in_data_iteration_count == wait_cnt)
      wait_on_input_required();
   if (_capture_data_in_data && !testbench::data_in_data_ignore)
   {
      int cur_iter = data_in_data_capture_count;
      ++data_in_data_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_data_in_data;
      while (ccs_scv_i < data_in.ac_channel<DATA_MEM >::debug_size()) {
         for (ccs_scv_j = last_j_data_in_data_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < data_in.ac_channel<DATA_MEM >::debug_size()) {
               int data_in_linear_idx = 0;
               for (int data_in_idx_0 = 0; data_in_idx_0 < 8192; ++data_in_idx_0)
                  data_in_data_tmp[data_in_linear_idx++] = data_in.ac_channel<DATA_MEM >::chan[ccs_scv_i].DATA_MEM::data[data_in_idx_0];
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_data_in_data->put(data_in_data_tmp);
            last_j_data_in_data_in = 0;
            data_in_data_capture_count += chan_factor;
         } else {
            last_j_data_in_data_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("data_in_data",testbench::data_in_data_wait_ctrl,ccs_wait_ctrl_data_in_data.operator->(),cur_iter,data_in_data_capture_count,1);
   }
   testbench::data_in_data_ignore = false;
}
// ============================================
// Function: capture_hist_out
// --------------------------------------------

void mc_testbench::capture_hist_out( ac_channel<HIST_MEM > &hist_out)
{
   static mc_golden_info< mgc_sysc_ver_array1D<ac_int<8, false >,256>, ac_int<8, false > > hist_out_data_tmp(testbench::hist_out_data_ignore, false, hist_out_data_iteration_count);
   hist_out_data_tmp._ignore = testbench::hist_out_data_ignore;
   hist_out_data_tmp._iteration = hist_out_data_iteration_count;
   hist_out_data_tmp._data.mc_testbench_process_array_bounds("hist_out_data",testbench::hist_out_data_array_comp_first,testbench::hist_out_data_array_comp_last,255,0);
   // BEGIN: testbench output_mask control for field_name hist_out_data
   if ( testbench::hist_out_data_use_mask ) {
      hist_out_data_tmp._use_mask = true;
      hist_out_data_tmp._mask = testbench::hist_out_data_output_mask ;
   }
   // END: testbench output_mask control for field_name hist_out_data
   static int last_j_hist_out_data_out = 0;
   if (_capture_hist_out_data)
   {
      int cur_iter = hist_out_data_capture_count;
      ++hist_out_data_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_hist_out_data_golden;
      while (ccs_scv_i < hist_out.ac_channel<HIST_MEM >::debug_size()) {
         for (ccs_scv_j = last_j_hist_out_data_out; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < hist_out.ac_channel<HIST_MEM >::debug_size()) {
               int hist_out_linear_idx = 0;
               for (int hist_out_idx_0 = 0; hist_out_idx_0 < 256; ++hist_out_idx_0)
                  hist_out_data_tmp._data[hist_out_linear_idx++] = hist_out.ac_channel<HIST_MEM >::chan[ccs_scv_i].HIST_MEM::data[hist_out_idx_0];
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            hist_out_data_golden.put(hist_out_data_tmp);
            last_j_hist_out_data_out = 0;
            hist_out_data_capture_count += chan_factor;
         } else {
            last_j_hist_out_data_out = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("hist_out_data",testbench::hist_out_data_wait_ctrl,ccs_wait_ctrl_hist_out_data.operator->(),cur_iter,hist_out_data_capture_count,1);
      testbench::hist_out_data_use_mask = false;
   }
   testbench::hist_out_data_ignore = false;
   testbench::hist_out_data_skip = false;
}
// ============================================
// Function: wait_on_input_required
// --------------------------------------------

void mc_testbench::wait_on_input_required()
{
   ++wait_cnt;
   wait(SC_ZERO_TIME); // get fifos a chance to update
   while (atleast_one_active_input) {
      if (_capture_data_in_data && ccs_data_in_data->used() == 0) return;
      that->cpp_testbench_active.write(false);
      wait(ccs_data_in_data->ok_to_put());
      that->cpp_testbench_active.write(true);
   }
}
// ============================================
// Function: capture_IN
// --------------------------------------------

void mc_testbench::capture_IN( ac_channel<DATA_MEM > &data_in,  ac_channel<HIST_MEM > &hist_out)
{
   that->capture_data_in(data_in);
   that->remaining_hist_out_data_golden =  hist_out.ac_channel<HIST_MEM >::debug_size();
}
// ============================================
// Function: capture_OUT
// --------------------------------------------

void mc_testbench::capture_OUT( ac_channel<DATA_MEM > &data_in,  ac_channel<HIST_MEM > &hist_out)
{
   that->remaining_ccs_data_in_data =  data_in.ac_channel<DATA_MEM >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_data_in_data != 0) {
      cout << "Warning: Testbench input channel 'data_in' not empty. Remaining size: " << that->remaining_ccs_data_in_data << endl;
   }
   that->capture_hist_out(hist_out);
}
// ============================================
// Function: exec_histogram_hls
// --------------------------------------------

void mc_testbench::exec_histogram_hls( ac_channel<DATA_MEM > &data_in,  ac_channel<HIST_MEM > &hist_out)
{
   #ifndef CCS_SCVERIFY_USE_CCS_BLOCK
   that->cpp_testbench_active.write(true);
   capture_IN(data_in, hist_out);
   histogram_hls(data_in, hist_out);
   // throttle ac_channel based on number of calls to chan::size() or chan::empty() or chan::nb_read() (but not chan::available()) 
   if (1) {
      int cnt=0;
      if (cnt) std::cout << "mc_testbench.cpp: CONTINUES @ " << sc_time_stamp() << std::endl;
      if (cnt) that->cpp_testbench_active.write(true);
   }
   capture_OUT(data_in, hist_out);
   #else
   #endif
}
// ============================================
// Function: start_of_simulation
// --------------------------------------------

void mc_testbench::start_of_simulation()
{
   set_enable_stalls(false);
}
// ============================================
// Function: end_of_simulation
// --------------------------------------------

void mc_testbench::end_of_simulation()
{
   if (!_checked_results) {
      SC_REPORT_INFO(name(), "Simulation ran into deadlock");
      check_results();
   }
}
// ============================================
// Function: check_results
// --------------------------------------------

void mc_testbench::check_results()
{
   if (_checked_results) return;
   _checked_results = true;
   cout<<endl;
   cout<<"Checking results"<<endl;
   if (main_exit_code) _failed = true;
   int _num_outputs_checked = 0;
   bool _has_capture_counts = false;
   std::ostringstream mctb_msg;
   
   if (!_capture_hist_out_data) {
      cout<<"'hist_out_data' - warning, output was optimized away"<<endl;
   } else {
      _num_outputs_checked++;
      _failed |= hist_out_data_comp->check_results(hist_out_data_capture_count,testbench::hist_out_data_skip_noerr);
      _has_capture_counts |= !!(hist_out_data_capture_count);
   }
   cout<<endl;
   if (_num_outputs_checked == 0) {
      cout<<"Error: All outputs were optimized away. No output values were compared."<<endl;
      _failed = _failed || (_num_outputs_checked == 0);
   }
   if (!_has_capture_counts) {
      cout<<"Error: Nothing to compare, all output capture counts are zero."<<endl;
      _failed = true;
   }
   if (main_exit_code) cout << "Error: C++ Testbench 'main()' returned a non-zero exit code ("<<main_exit_code<<"). Check your testbench." <<endl;
   mctb_msg.clear();
   if (_failed) mctb_msg << "Simulation FAILED";
   else         mctb_msg << "Simulation PASSED";
   mctb_msg << " @ " << sc_time_stamp();
   SC_REPORT_INFO(this->name(), mctb_msg.str().c_str());
}
// ============================================
// Function: failed
// --------------------------------------------

bool mc_testbench::failed()
{
   return _failed;
}
// ============================================
// Function: set_failed
// --------------------------------------------

void mc_testbench::set_failed(bool fail)
{
   _failed = fail;
}
// ---------------------------------------------------------------
// Process: SC_METHOD wait_for_end
// Static sensitivity: sensitive << clk.pos() << testbench_end_event;

void mc_testbench::wait_for_end() {
   // If run() has not finished, we do nothing here
   if (!testbench_ended) return;
   // check for completed outputs
   if (hist_out_data_comp->get_compare_count() < hist_out_data_capture_count) {testbench_end_event.notify(1,SC_NS); return;}
   // If we made it here, all outputs have flushed. Check the results
   SC_REPORT_INFO(name(), "Simulation completed");
   check_results();
   sc_stop();
}
// ---------------------------------------------------------------
// Process: SC_THREAD run
// Static sensitivity: 

void mc_testbench::run() {
   testbench::enable_idle_sync_mode = false;
   testbench::idle_sync_stable_cycles = 1;
   testbench::data_in_data_ignore = false;
   testbench::data_in_data_skip = false;
   testbench::data_in_data_skip_quiet = false;
   testbench::data_in_data_skip_once = false;
   testbench::data_in_data_skip_noerr = false;
   testbench::data_in_data_array_comp_first = -1;
   testbench::data_in_data_array_comp_last = -1;
   testbench::data_in_data_wait_ctrl.clear();
   data_in_data_capture_count = 0;
   data_in_data_iteration_count = 0;
   testbench::hist_out_data_ignore = false;
   testbench::hist_out_data_skip = false;
   testbench::hist_out_data_skip_quiet = false;
   testbench::hist_out_data_skip_once = false;
   testbench::hist_out_data_skip_noerr = false;
   testbench::hist_out_data_array_comp_first = -1;
   testbench::hist_out_data_array_comp_last = -1;
   testbench::hist_out_data_use_mask = false;
   testbench::hist_out_data_output_mask = ~0;
   testbench::hist_out_data_wait_ctrl.clear();
   hist_out_data_capture_count = 0;
   hist_out_data_iteration_count = 0;
   testbench testbench_inst(sc_argc(), sc_argv());
   main_exit_code = testbench_inst.main();
   cout<<"Info: Execution of user-supplied C++ testbench 'main()' has completed with exit code = " << main_exit_code << endl;
   cout<<endl;
   cout<<"Info: Collecting data completed"<<endl;
   cout<<"   captured "<<data_in_data_capture_count<<" values of data_in_data"<<endl;
   cout<<"   captured "<<hist_out_data_capture_count<<" values of hist_out_data"<<endl;
   testbench_ended = true;
   testbench_end_event.notify(SC_ZERO_TIME);
}
#ifdef CCS_SCVERIFY_USE_CCS_BLOCK
#include "ccs_block_macros.cpp"
#endif
