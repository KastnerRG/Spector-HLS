// ----------------------------------------------------------------------------
// SystemC Testbench Body
//
//    HLS version: 10.4b/841621 Production Release
//       HLS date: Thu Oct 24 17:20:07 PDT 2019
//  Flow Packages: HDL_Tcl 8.0a, SCVerify 10.4
//
//   Generated by: mdk@mdk-FX504
// Generated date: Sat Jan 04 23:54:59 PST 2020
//
// ----------------------------------------------------------------------------
// 
// -------------------------------------
// mc_testbench
// SCVerify mc_testbench SC_MODULE
// -------------------------------------
// 
#include "mc_testbench.h"
#include <mc_testbench_util.h>
#include <mc_simulator_extensions.h>

mc_testbench* mc_testbench::that;
bool testbench::enable_idle_sync_mode;
unsigned short testbench::idle_sync_stable_cycles;
void testbench::set_enable_stalls(bool flag) { mc_testbench::set_enable_stalls(flag); }
void testbench::reset_request() { mc_testbench::that->reset_request(); }
void mc_testbench_reset_request() { mc_testbench::that->reset_request(); }
bool testbench::INPUT_ignore;
void mc_testbench_INPUT_skip(bool v) { testbench::INPUT_skip = v; }
bool testbench::INPUT_skip;
bool testbench::INPUT_skip_quiet;
bool testbench::INPUT_skip_once;
bool testbench::INPUT_skip_noerr;
int  testbench::INPUT_array_comp_first;
int  testbench::INPUT_array_comp_last;
mc_wait_ctrl testbench::INPUT_wait_ctrl;
bool testbench::OUTPUT_ignore;
void mc_testbench_OUTPUT_skip(bool v) { testbench::OUTPUT_skip = v; }
bool testbench::OUTPUT_skip;
bool testbench::OUTPUT_skip_quiet;
bool testbench::OUTPUT_skip_once;
bool testbench::OUTPUT_skip_noerr;
int  testbench::OUTPUT_array_comp_first;
int  testbench::OUTPUT_array_comp_last;
bool testbench::OUTPUT_use_mask;
ac_int<8, false > testbench::OUTPUT_output_mask;
mc_wait_ctrl testbench::OUTPUT_wait_ctrl;
#ifndef CCS_SCVERIFY_USE_CCS_BLOCK
extern "C++" void SAD_MATCH( ac_channel<ac_int<8, false > > &INPUT,  ac_channel<ac_int<8, false > > &OUTPUT);
#endif
#ifndef CCS_SCVERIFY_USE_CCS_BLOCK
void testbench::exec_SAD_MATCH( ac_channel<ac_int<8, false > > &INPUT,  ac_channel<ac_int<8, false > > &OUTPUT) {
   return mc_testbench::exec_SAD_MATCH(INPUT, OUTPUT);
}
#endif

// ============================================
// Function: wait_for_idle_sync
// --------------------------------------------

void mc_testbench::wait_for_idle_sync()
{
   if (testbench::enable_idle_sync_mode) {
      std::cout << "mc_testbench STOPPING   @ " << sc_time_stamp() << std::endl;
      that->cpp_testbench_active.write(false);
      while (that->design_is_idle.read())  that->wait(that->design_is_idle.value_changed_event());
      while (!that->design_is_idle.read()) that->wait(that->design_is_idle.value_changed_event());
      that->cpp_testbench_active.write(true);
      std::cout << "mc_testbench CONTINUING @ " << sc_time_stamp() << std::endl;
   } else {
      that->cpp_testbench_active.write(true);
   }
}
// ============================================
// Function: set_enable_stalls
// --------------------------------------------

void mc_testbench::set_enable_stalls(bool flag)
{
   if (flag) {
     std::cout << "Enabling STALL_FLAG toggling" << std::endl;
     that->enable_stalls.write(sc_dt::Log_1);
   } else {
     std::cout << "Disabling STALL_FLAG toggling" << std::endl;
     that->enable_stalls.write(sc_dt::Log_0);
   }
}
// ============================================
// Function: reset_request
// --------------------------------------------

void mc_testbench::reset_request()
{
   reset_request_event.notify(0,SC_NS);
}
// ============================================
// Function: capture_INPUT
// --------------------------------------------

void mc_testbench::capture_INPUT( ac_channel<ac_int<8, false > > &INPUT)
{
   static ac_int<8, false > INPUT_tmp;
   static int last_j_INPUT_in = 0;
   if (INPUT_iteration_count == wait_cnt)
      wait_on_input_required();
   if (_capture_INPUT && !testbench::INPUT_ignore)
   {
      int cur_iter = INPUT_capture_count;
      ++INPUT_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_ccs_INPUT;
      while (ccs_scv_i < INPUT.ac_channel<ac_int<8, false > >::debug_size()) {
         for (ccs_scv_j = last_j_INPUT_in; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < INPUT.ac_channel<ac_int<8, false > >::debug_size()) {
               INPUT_tmp = INPUT.ac_channel<ac_int<8, false > >::chan[ccs_scv_i];
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            ccs_INPUT->put(INPUT_tmp);
            last_j_INPUT_in = 0;
            INPUT_capture_count += chan_factor;
         } else {
            last_j_INPUT_in = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("INPUT",testbench::INPUT_wait_ctrl,ccs_wait_ctrl_INPUT.operator->(),cur_iter,INPUT_capture_count,1);
   }
   testbench::INPUT_ignore = false;
}
// ============================================
// Function: capture_OUTPUT
// --------------------------------------------

void mc_testbench::capture_OUTPUT( ac_channel<ac_int<8, false > > &OUTPUT)
{
   static mc_golden_info< ac_int<8, false >, ac_int<8, false > > OUTPUT_tmp(testbench::OUTPUT_ignore, false, OUTPUT_iteration_count);
   OUTPUT_tmp._ignore = testbench::OUTPUT_ignore;
   OUTPUT_tmp._iteration = OUTPUT_iteration_count;
   static int last_j_OUTPUT_out = 0;
   if (_capture_OUTPUT)
   {
      int cur_iter = OUTPUT_capture_count;
      ++OUTPUT_iteration_count;
      unsigned int chan_factor = 1;
      unsigned int ccs_scv_i,ccs_scv_j;
      ccs_scv_i = remaining_OUTPUT_golden;
      while (ccs_scv_i < OUTPUT.ac_channel<ac_int<8, false > >::debug_size()) {
         for (ccs_scv_j = last_j_OUTPUT_out; ccs_scv_j < chan_factor; ccs_scv_j++,ccs_scv_i++) {
            if (ccs_scv_i < OUTPUT.ac_channel<ac_int<8, false > >::debug_size()) {
               OUTPUT_tmp._data = OUTPUT.ac_channel<ac_int<8, false > >::chan[ccs_scv_i];
            } else {
               break;
            }
         }
         if (ccs_scv_j == chan_factor) {
            OUTPUT_golden.put(OUTPUT_tmp);
            last_j_OUTPUT_out = 0;
            OUTPUT_capture_count += chan_factor;
         } else {
            last_j_OUTPUT_out = ccs_scv_j;
         }
      }
      mc_testbench_util::process_wait_ctrl("OUTPUT",testbench::OUTPUT_wait_ctrl,ccs_wait_ctrl_OUTPUT.operator->(),cur_iter,OUTPUT_capture_count,1);
      testbench::OUTPUT_use_mask = false;
   }
   testbench::OUTPUT_ignore = false;
   testbench::OUTPUT_skip = false;
}
// ============================================
// Function: wait_on_input_required
// --------------------------------------------

void mc_testbench::wait_on_input_required()
{
   ++wait_cnt;
   wait(SC_ZERO_TIME); // get fifos a chance to update
   while (atleast_one_active_input) {
      if (_capture_INPUT && ccs_INPUT->used() == 0) return;
      that->cpp_testbench_active.write(false);
      wait(ccs_INPUT->ok_to_put());
      that->cpp_testbench_active.write(true);
   }
}
// ============================================
// Function: capture_IN
// --------------------------------------------

void mc_testbench::capture_IN( ac_channel<ac_int<8, false > > &INPUT,  ac_channel<ac_int<8, false > > &OUTPUT)
{
   that->capture_INPUT(INPUT);
   that->remaining_OUTPUT_golden =  OUTPUT.ac_channel<ac_int<8, false > >::debug_size();
}
// ============================================
// Function: capture_OUT
// --------------------------------------------

void mc_testbench::capture_OUT( ac_channel<ac_int<8, false > > &INPUT,  ac_channel<ac_int<8, false > > &OUTPUT)
{
   that->remaining_ccs_INPUT =  INPUT.ac_channel<ac_int<8, false > >::debug_size();
   if (testbench::enable_idle_sync_mode && that->remaining_ccs_INPUT != 0) {
      cout << "Warning: Testbench input channel 'INPUT' not empty. Remaining size: " << that->remaining_ccs_INPUT << endl;
   }
   that->capture_OUTPUT(OUTPUT);
}
// ============================================
// Function: exec_SAD_MATCH
// --------------------------------------------

void mc_testbench::exec_SAD_MATCH( ac_channel<ac_int<8, false > > &INPUT,  ac_channel<ac_int<8, false > > &OUTPUT)
{
   #ifndef CCS_SCVERIFY_USE_CCS_BLOCK
   that->cpp_testbench_active.write(true);
   capture_IN(INPUT, OUTPUT);
   SAD_MATCH(INPUT, OUTPUT);
   // throttle ac_channel based on number of calls to chan::size() or chan::empty() or chan::nb_read() (but not chan::available()) 
   if (1) {
      int cnt=0;
      if (cnt) std::cout << "mc_testbench.cpp: CONTINUES @ " << sc_time_stamp() << std::endl;
      if (cnt) that->cpp_testbench_active.write(true);
   }
   capture_OUT(INPUT, OUTPUT);
   #else
   #endif
}
// ============================================
// Function: start_of_simulation
// --------------------------------------------

void mc_testbench::start_of_simulation()
{
   set_enable_stalls(false);
}
// ============================================
// Function: end_of_simulation
// --------------------------------------------

void mc_testbench::end_of_simulation()
{
   if (!_checked_results) {
      SC_REPORT_INFO(name(), "Simulation ran into deadlock");
      check_results();
   }
}
// ============================================
// Function: check_results
// --------------------------------------------

void mc_testbench::check_results()
{
   if (_checked_results) return;
   _checked_results = true;
   cout<<endl;
   cout<<"Checking results"<<endl;
   if (main_exit_code) _failed = true;
   int _num_outputs_checked = 0;
   bool _has_capture_counts = false;
   std::ostringstream mctb_msg;
   
   if (!_capture_OUTPUT) {
      cout<<"'OUTPUT' - warning, output was optimized away"<<endl;
   } else {
      _num_outputs_checked++;
      _failed |= OUTPUT_comp->check_results(OUTPUT_capture_count,testbench::OUTPUT_skip_noerr);
      _has_capture_counts |= !!(OUTPUT_capture_count);
   }
   cout<<endl;
   if (_num_outputs_checked == 0) {
      cout<<"Error: All outputs were optimized away. No output values were compared."<<endl;
      _failed = _failed || (_num_outputs_checked == 0);
   }
   if (!_has_capture_counts) {
      cout<<"Error: Nothing to compare, all output capture counts are zero."<<endl;
      _failed = true;
   }
   if (main_exit_code) cout << "Error: C++ Testbench 'main()' returned a non-zero exit code ("<<main_exit_code<<"). Check your testbench." <<endl;
   mctb_msg.clear();
   if (_failed) mctb_msg << "Simulation FAILED";
   else         mctb_msg << "Simulation PASSED";
   mctb_msg << " @ " << sc_time_stamp();
   SC_REPORT_INFO(this->name(), mctb_msg.str().c_str());
}
// ============================================
// Function: failed
// --------------------------------------------

bool mc_testbench::failed()
{
   return _failed;
}
// ============================================
// Function: set_failed
// --------------------------------------------

void mc_testbench::set_failed(bool fail)
{
   _failed = fail;
}
// ---------------------------------------------------------------
// Process: SC_METHOD wait_for_end
// Static sensitivity: sensitive << clk.pos() << testbench_end_event;

void mc_testbench::wait_for_end() {
   // If run() has not finished, we do nothing here
   if (!testbench_ended) return;
   // check for completed outputs
   if (OUTPUT_comp->get_compare_count() < OUTPUT_capture_count) {testbench_end_event.notify(1,SC_NS); return;}
   // If we made it here, all outputs have flushed. Check the results
   SC_REPORT_INFO(name(), "Simulation completed");
   check_results();
   sc_stop();
}
// ---------------------------------------------------------------
// Process: SC_THREAD run
// Static sensitivity: 

void mc_testbench::run() {
   testbench::enable_idle_sync_mode = false;
   testbench::idle_sync_stable_cycles = 1;
   testbench::INPUT_ignore = false;
   testbench::INPUT_skip = false;
   testbench::INPUT_skip_quiet = false;
   testbench::INPUT_skip_once = false;
   testbench::INPUT_skip_noerr = false;
   testbench::INPUT_array_comp_first = -1;
   testbench::INPUT_array_comp_last = -1;
   testbench::INPUT_wait_ctrl.clear();
   INPUT_capture_count = 0;
   INPUT_iteration_count = 0;
   testbench::OUTPUT_ignore = false;
   testbench::OUTPUT_skip = false;
   testbench::OUTPUT_skip_quiet = false;
   testbench::OUTPUT_skip_once = false;
   testbench::OUTPUT_skip_noerr = false;
   testbench::OUTPUT_array_comp_first = -1;
   testbench::OUTPUT_array_comp_last = -1;
   testbench::OUTPUT_use_mask = false;
   testbench::OUTPUT_output_mask = ~0;
   testbench::OUTPUT_wait_ctrl.clear();
   OUTPUT_capture_count = 0;
   OUTPUT_iteration_count = 0;
   testbench testbench_inst(sc_argc(), sc_argv());
   main_exit_code = testbench_inst.main();
   cout<<"Info: Execution of user-supplied C++ testbench 'main()' has completed with exit code = " << main_exit_code << endl;
   cout<<endl;
   cout<<"Info: Collecting data completed"<<endl;
   cout<<"   captured "<<INPUT_capture_count<<" values of INPUT"<<endl;
   cout<<"   captured "<<OUTPUT_capture_count<<" values of OUTPUT"<<endl;
   testbench_ended = true;
   testbench_end_event.notify(SC_ZERO_TIME);
}
#ifdef CCS_SCVERIFY_USE_CCS_BLOCK
#include "ccs_block_macros.cpp"
#endif
